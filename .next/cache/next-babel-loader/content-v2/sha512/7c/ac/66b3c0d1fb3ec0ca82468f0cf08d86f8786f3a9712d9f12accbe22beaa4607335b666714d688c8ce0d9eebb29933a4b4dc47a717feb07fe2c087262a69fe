{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\NextJs\\\\my-second-next-app\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: meetup.title,\n    address: meetup.address,\n    image: meetup.image,\n    description: meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://odinakafocha:0DE$ca$h@odinaka.gbxje.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupsIds = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupsIds.map(meetupsId => ({\n      params: {\n        meetupId: meetupsId._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect('mongodb+srv://odinakafocha:0DE$ca$h@odinaka.gbxje.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  ;\n  return {\n    props: {\n      title: meetup.title,\n      address: meetup.address,\n      image: meetup.image,\n      description: meet\n    },\n    revalidate: 10\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/user/NextJs/my-second-next-app/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","meetup","title","address","image","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetupsIds","find","_id","toArray","close","fallback","paths","map","meetupsId","params","meetupId","toString","getStaticProps","context","findOne","meet","revalidate"],"mappings":";;AAAA,SAAQA,WAAR,QAA0B,SAA1B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAGA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBAAO,QAAC,YAAD;AAAe,IAAA,KAAK,EAAIC,MAAM,CAACC,KAA/B;AAAsC,IAAA,OAAO,EAAID,MAAM,CAACE,OAAxD;AAAiE,IAAA,KAAK,EAAIF,MAAM,CAACG,KAAjF;AAAwF,IAAA,WAAW,EAAIH,MAAM,CAACI;AAA9G;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACtC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,mGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,UAAU,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAzB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,UAAU,CAACO,GAAX,CAAeC,SAAS,KAAK;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,SAAS,CAACN,GAAV,CAAcS,QAAd;AAAX;AAAT,KAAL,CAAxB;AAFJ,GAAP;AAIH,CAVM;AAWP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC7C,QAAM;AAACH,IAAAA;AAAD,MAAaG,OAAO,CAACJ,MAA3B;AACA,QAAMd,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,mGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMV,MAAM,GAAG,MAAMS,iBAAiB,CAACgB,OAAlB,CAA0B;AAACZ,IAAAA,GAAG,EAAEQ;AAAN,GAA1B,CAArB;AACAf,EAAAA,MAAM,CAACS,KAAP;AACD;AACC,SAAO;AACHhB,IAAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAED,MAAM,CAACC,KAAhB;AAAuBC,MAAAA,OAAO,EAAEF,MAAM,CAACE,OAAvC;AAAgDC,MAAAA,KAAK,EAAEH,MAAM,CAACG,KAA9D;AAAqEC,MAAAA,WAAW,EAAEsB;AAAlF,KADJ;AAEHC,IAAAA,UAAU,EAAE;AAFT,GAAP;AAIH,CAZM;AAcP,eAAe7B,aAAf","sourcesContent":["import {MongoClient} from 'mongodb';\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\n\r\nconst MeetupDetails = (props) => {\r\n  return <MeetupDetail  title = {meetup.title} address = {meetup.address} image = {meetup.image} description = {meetup.description}/>\r\n};\r\n\r\nexport const getStaticPaths = async () => {\r\n    const client = await MongoClient.connect('mongodb+srv://odinakafocha:0DE$ca$h@odinaka.gbxje.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const meetupsIds = await meetupsCollection.find({}, {_id: 1}).toArray();\r\n    client.close();\r\n    return {\r\n        fallback: false,\r\n        paths: meetupsIds.map(meetupsId => ({params: {meetupId: meetupsId._id.toString()}}))\r\n    }\r\n}\r\nexport const getStaticProps = async (context) => {\r\n    const {meetupId} = context.params;\r\n    const client = await MongoClient.connect('mongodb+srv://odinakafocha:0DE$ca$h@odinaka.gbxje.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const meetup = await meetupsCollection.findOne({_id: meetupId});\r\n    client.close();\r\n   ;\r\n    return {\r\n        props: { title: meetup.title, address: meetup.address, image: meetup.image, description: meet},\r\n        revalidate: 10\r\n    }\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}